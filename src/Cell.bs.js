// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make(coordinate) {
  return /* record */[
          /* coordinate */coordinate,
          /* links : [] */0,
          /* neighbors : record */[
            /* n */undefined,
            /* e */undefined,
            /* s */undefined,
            /* w */undefined
          ]
        ];
}

function link(self, cell) {
  return /* record */[
          /* coordinate */self[/* coordinate */0],
          /* links : :: */[
            cell,
            self[/* links */1]
          ],
          /* neighbors */self[/* neighbors */2]
        ];
}

function unlink(self, cell) {
  return /* record */[
          /* coordinate */self[/* coordinate */0],
          /* links */List.filter((function (l) {
                    return l !== cell;
                  }))(self[/* links */1]),
          /* neighbors */self[/* neighbors */2]
        ];
}

function isLinked(self, cell) {
  try {
    List.find((function (c) {
            return Caml_obj.caml_equal(c, cell);
          }), self[/* links */1]);
    return true;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return false;
    } else {
      throw exn;
    }
  }
}

var compare = Caml_obj.caml_compare;

var CellMap = $$Map.Make(/* module */[/* compare */compare]);

function addCell(c, g) {
  return /* record */[
          /* rows */g[/* rows */0],
          /* cols */g[/* cols */1],
          /* grid */Curry._3(CellMap[/* add */3], c[/* coordinate */0], c, g[/* grid */2])
        ];
}

function getCell(c, param) {
  var exit = 0;
  var cell;
  try {
    cell = Curry._2(CellMap[/* find */21], c, param[/* grid */2]);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return undefined;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return cell;
  }
  
}

function getNeighbors(self, g) {
  var match = self[/* coordinate */0];
  var col = match[1];
  var row = match[0];
  return /* record */[
          /* coordinate */self[/* coordinate */0],
          /* links */self[/* links */1],
          /* neighbors : record */[
            /* n */getCell(/* tuple */[
                  row - 1 | 0,
                  col
                ], g),
            /* e */getCell(/* tuple */[
                  row,
                  col + 1 | 0
                ], g),
            /* s */getCell(/* tuple */[
                  row + 1 | 0,
                  col
                ], g),
            /* w */getCell(/* tuple */[
                  row,
                  col - 1 | 0
                ], g)
          ]
        ];
}

exports.make = make;
exports.link = link;
exports.unlink = unlink;
exports.isLinked = isLinked;
exports.CellMap = CellMap;
exports.addCell = addCell;
exports.getCell = getCell;
exports.getNeighbors = getNeighbors;
/* CellMap Not a pure module */
